#!/usr/bin/env node

var component = process.argv[2];
const workdir = "./workdir";

function Git (git_url, f) {
    if (!(git_url !== null && git_url !== undefined && git_url !== '')) {
        Stderr("Git url could not be null.\n");
        Stderr("[COUT] CO_RESULT = false\n");
        process.exit(1);
    }

    return Cmd('git clone ' + git_url + " " + workdir, null, f);
}

function Stdout (msg) {
    process.stdout.write(msg);
}

function Stderr (msg) {
    process.stderr.write(msg);
}

function Env () {
    var envs = new Array();
    co_data = process.env.CO_DATA;
    if (typeof co_data == 'string') {  
        envs = co_data.split(' ')  
    } else {  
        envs = [];  
    }
    
    var result = {};
    envs.forEach(function (v, i ,a) {
        kv = v.split('=');
        result[kv[0]] = kv[1];
    });
    return result;
}

async function Cmd (cmd, cwd, f) {
    if (!(cmd !== null && cmd !== undefined && cmd !== '')) {
        Stderr("Cmd could not be null.\n");
        Stderr("[COUT] CO_RESULT = false\n");
        process.exit(1);
    }

    var exec = require('child_process').exec;
    var e = exec(cmd, {
        cwd: cwd
    });

    e.stdout.on('data', data => Stdout(data));
    e.stderr.on('data', data => Stderr(data));

    return e.on('exit', (code) => {
        if (code == 0 || code == null) {
            if (f != null) {
                f();
            }
        } else {
            Stderr("[COUT] CO_RESULT = false\n");
            process.exit(1);
        }
    });
}

function getCmd(params, paramsList, baseCmd) {
    var cmd = baseCmd;

    if (!isNull(params['file'])) {
        cmd = cmd + " " + params['file'];
    }

    console.log(cmd);
    return cmd;
}

function isNull(data) {
    return !(data !== null && data !== undefined && data !== '');
}

if (!(component !== null || component !== undefined || component !== '')) {
    Stderr("component could not be null\n");
    Stderr("[COUT] CO_RESULT = false\n");
    process.exit(1);
}

var paramsList = [
    "d"
];

var co_data = Env();
var cmd = getCmd(co_data, paramsList, "docco");

Git(co_data.git_url, () => {
    Cmd(cmd, workdir, () => {
        Stdout("[COUT] CO_RESULT = true\n");
    });
});
